{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "420a867a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "472 385\n",
      "[3, 8, 5]\n"
     ]
    }
   ],
   "source": [
    "A, B = map(int, input().split())\n",
    "B = list(map(int, str(B)))\n",
    "print(B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "79475f89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, 3]\n"
     ]
    }
   ],
   "source": [
    "a = [1,2,3]\n",
    "print(str(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a4303748",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 5\n"
     ]
    }
   ],
   "source": [
    "print(3, 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "392ca50c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "3 * 1 = 3\n",
      "3 * 2 = 6\n",
      "3 * 3 = 9\n",
      "3 * 4 = 12\n",
      "3 * 5 = 15\n",
      "3 * 6 = 18\n",
      "3 * 7 = 21\n",
      "3 * 8 = 24\n",
      "3 * 9 = 27\n"
     ]
    }
   ],
   "source": [
    "N = int(input())\n",
    "for i in range(1,10):\n",
    "    print(N, '*', i, '=', N*i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "29a8348e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "1 1\n",
      "2\n",
      "1 2\n",
      "3\n",
      "3 4\n",
      "7\n",
      "44\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "not enough values to unpack (expected 2, got 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[1;32mIn [4]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m T \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mint\u001b[39m(\u001b[38;5;28minput\u001b[39m())\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(T):\n\u001b[1;32m----> 3\u001b[0m     A, B \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmap\u001b[39m(\u001b[38;5;28mint\u001b[39m, \u001b[38;5;28minput\u001b[39m()\u001b[38;5;241m.\u001b[39msplit())\n\u001b[0;32m      4\u001b[0m     \u001b[38;5;28mprint\u001b[39m(A\u001b[38;5;241m+\u001b[39mB)\n",
      "\u001b[1;31mValueError\u001b[0m: not enough values to unpack (expected 2, got 1)"
     ]
    }
   ],
   "source": [
    "T = int(input())\n",
    "for _ in range(T):\n",
    "    A, B = map(int, input().split())\n",
    "    print(A+B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4967660f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "18\n"
     ]
    }
   ],
   "source": [
    "n = int(input())\n",
    "a=0\n",
    "for i in range(1,n+1):\n",
    "    a += i\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c3fd0a14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "260000\n",
      "4\n",
      "20000 5\n",
      "30000 2\n",
      "10000 6\n",
      "5000 8\n",
      "Yes\n"
     ]
    }
   ],
   "source": [
    "X = int(input())\n",
    "N = int(input())\n",
    "c=0\n",
    "for _ in range(N):\n",
    "    a, b = map(int, input().split())\n",
    "    c += a*b\n",
    "if c == X : print('Yes')\n",
    "else : print('No')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ddc3fbf9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n",
      "long long long int\n"
     ]
    }
   ],
   "source": [
    "N = int(input())\n",
    "print('long '*(N//4) + 'int')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cf61be93",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "invalid literal for int() with base 10: ''",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Input \u001b[1;32mIn [25]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01msys\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m T \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mint\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43msys\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstdin\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mreadline\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(T):\n\u001b[0;32m      4\u001b[0m     A, B \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmap\u001b[39m(\u001b[38;5;28mint\u001b[39m, sys\u001b[38;5;241m.\u001b[39mstdin\u001b[38;5;241m.\u001b[39mreadline()\u001b[38;5;241m.\u001b[39mrstrip())\n",
      "\u001b[1;31mValueError\u001b[0m: invalid literal for int() with base 10: ''"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "T = int(sys.stdin.readline())\n",
    "for _ in range(T):\n",
    "    A, B = map(int, sys.stdin.readline().rstrip())\n",
    "    print(A+B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d012cd3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "1 2\n",
      "Case #1: 3\n",
      "2 4\n",
      "Case #2: 6\n",
      "3 6\n",
      "Case #3: 9\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "T = int(sys.stdin.readline())\n",
    "for t in range(T):\n",
    "    A, B = map(int, sys.stdin.readline().split())\n",
    "    print(f'Case #{t+1}: {A+B}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "1d50c349",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "1 2\n",
      "Case #1: A + B = 3\n",
      "1 3\n",
      "Case #2: A + B = 4\n",
      "1 4\n",
      "Case #3: A + B = 5\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "T = int(input())\n",
    "for t in range(T):\n",
    "    A, B = map(int, input().split())\n",
    "    print(f'Case #{t+1}: A + B = {A+B}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "bc48c9ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "*\n",
      "**\n",
      "***\n",
      "****\n",
      "*****\n"
     ]
    }
   ],
   "source": [
    "N = int(input())\n",
    "for n in range(N):\n",
    "    print('*'*(n+1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8502bd74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "    *\n",
      "   **\n",
      "  ***\n",
      " ****\n",
      "*****\n"
     ]
    }
   ],
   "source": [
    "N = int(input())\n",
    "for n in range(N):\n",
    "    print(' '*(N-n-1)+'*'*(n+1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65b32af3",
   "metadata": {},
   "outputs": [],
   "source": [
    "true = 1\n",
    "while true != 0:\n",
    "  A, B = map(int, input().split())\n",
    "  true = A+B\n",
    "  if true == 0:\n",
    "    break\n",
    "  print(true)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6cb3c85d",
   "metadata": {},
   "outputs": [],
   "source": [
    "while True:\n",
    "  try:\n",
    "    A, B = map(int, input().split())\n",
    "    print(A+B)\n",
    "  except:\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9c6e6f00",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3\n"
     ]
    }
   ],
   "source": [
    "N = int(input())\n",
    "a = list(map(int, input().split()))\n",
    "print(max(a), min(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "934dc3dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "ls = []\n",
    "for _ in range(9):\n",
    "  a = int(input())\n",
    "  ls.append(a)\n",
    "print(max(ls))\n",
    "print(ls.index(max(ls)) + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9275a97f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 4\n",
      "[2, 2, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "N, M = map(int, input().split())\n",
    "ls = [0] * N\n",
    "for _ in range(M):\n",
    "  i, j, k = map(int, input().split())\n",
    "  ls[(i - 1):j] = [k] * (j - i + 1)\n",
    "print(*ls)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b508157b",
   "metadata": {},
   "outputs": [],
   "source": [
    "N, M = map(int, input().split())\n",
    "ls = list(range(1,N+1))\n",
    "for _ in range(M):\n",
    "  i, j = map(int, input().split())\n",
    "  ls[i-1], ls[j-1] = ls[j-1], ls[i-1]\n",
    "print(*ls)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "b931105e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "3\n",
      "4\n",
      "2\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "ls = []\n",
    "ls2 = []\n",
    "for _ in range(28):\n",
    "  a = int(input())\n",
    "  ls.append(a)\n",
    "for i in range(1, 31):\n",
    "  if i not in ls: ls2.append(i)\n",
    "idx_min = ls2.index(min(ls2))\n",
    "print(min(ls2))\n",
    "ls2.pop(idx_min)\n",
    "print(*ls2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "9f3e97c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "from collections import Counter\n",
    "ls = list()\n",
    "for _ in range(10):\n",
    "  a = int(input())\n",
    "  ls.append(a % 42)\n",
    "counter = Counter(ls)\n",
    "print(len(counter.keys()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "51bcff83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 1, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "N, M = map(int, input().split())\n",
    "ls = list(range(1, N+1))\n",
    "for _ in range(M):\n",
    "  i,j = map(int, input().split())\n",
    "  b=ls[i-1:j]\n",
    "  b.reverse()\n",
    "  ls[i-1:j] = b\n",
    "print(*ls)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "1804e026",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30\n",
      "2\n",
      "[10, 20]\n",
      "26.0\n"
     ]
    }
   ],
   "source": [
    "ls=[10,20,30]\n",
    "max_val = max(ls)\n",
    "print(max_val)\n",
    "idx_max = ls.index(max_val)\n",
    "print(idx_max)\n",
    "ls.pop(idx_max)\n",
    "print(ls)\n",
    "print((max_val + sum(ls)*100/max_val)/N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c1b0f6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "N = int(input())\n",
    "ls = list(map(int, input().split()))\n",
    "max_val = max(ls)\n",
    "print((sum(ls)*100/max_val)/N)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de06be99",
   "metadata": {},
   "outputs": [],
   "source": [
    "T = int(input())\n",
    "for _ in range(T):\n",
    "  a = list(input())\n",
    "  print(a[0]+a[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "962d762c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1', '2', '3']\n"
     ]
    }
   ],
   "source": [
    "a=list(str(123))\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a7ac3f85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'AAAAA'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qr_code = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\$%*+-./:'\n",
    "T = int(input())\n",
    "for _ in range(T):\n",
    "  R, S = input().split()\n",
    "  result = [i*int(R) for i in S]\n",
    "  print(''.join(result))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "cad473a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "baaa\n",
      "['B', 'A', 'A', 'A']\n",
      "Counter({'A': 3, 'B': 1})\n",
      "A\n"
     ]
    }
   ],
   "source": [
    "import string\n",
    "from collections import Counter\n",
    "\n",
    "alpha = string.ascii_lowercase\n",
    "a = list(str(input()))\n",
    "a = [chr(ord(i)-32) if i in alpha else i for i in a]\n",
    "\n",
    "counter = Counter(a)\n",
    "max_val = max(counter.values())\n",
    "ls = [key for key in counter.keys() if counter[key] == max_val]\n",
    "\n",
    "if len(ls) > 1:\n",
    "  print('?')\n",
    "else:\n",
    "  print(''.join(ls))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9a13e35c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import string\n",
    "\n",
    "Alpha = string.ascii_uppercase\n",
    "data = dict()\n",
    "for alp in Alpha:\n",
    "  data[alp] = (ord(alp)-65)//3 + 2\n",
    "data['S']=7\n",
    "data['V']=8\n",
    "data['Y']=9\n",
    "data['Z']=9\n",
    "a = list(str(input()))\n",
    "result=0\n",
    "for s in a:\n",
    "  result += data[s]+1\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "930261e8",
   "metadata": {},
   "source": [
    "# 심화1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce980f69",
   "metadata": {},
   "source": [
    "## 3003"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5d80c201",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 1 2 1 2 1\n",
      "-1 0 0 1 0 7\n"
     ]
    }
   ],
   "source": [
    "now = list(map(int, input().split()))\n",
    "chess = [1,1,2,2,2,8]\n",
    "result = [chess[i]-now[i] for i in range(6)]\n",
    "\n",
    "print(*result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fd1d995",
   "metadata": {},
   "source": [
    "## 10812"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "38f2d12c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 5\n",
      "1 6 4\n",
      "3 9 8\n",
      "2 10 5\n",
      "1 3 3\n",
      "2 6 2\n",
      "1 4 6 2 3 7 10 5 8 9\n"
     ]
    }
   ],
   "source": [
    "N, M = map(int, input().split())\n",
    "\n",
    "basket = list(range(1, N + 1))\n",
    "for m in range(M):\n",
    "  i, j, k = map(int, input().split())\n",
    "  move = basket[k-1:j]\n",
    "  for t in basket[i-1:k-1]:\n",
    "    move.append(t)\n",
    "  basket[i-1:j] = move\n",
    "print(*basket)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c404c643",
   "metadata": {},
   "source": [
    "## 4344"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cbdb2214",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "5 50 50 70 80 100\n",
      "40.000%\n",
      "7 100 95 90 80 70 60 50\n",
      "57.143%\n"
     ]
    }
   ],
   "source": [
    "C = int(input())\n",
    "for _ in range(C):\n",
    "  score = list(map(int, input().split()))\n",
    "  N = score.pop(0)\n",
    "  mu = sum(score) / len(score)\n",
    "  cnt = 0\n",
    "  for n in range(N):\n",
    "    if score[n] > mu:\n",
    "      cnt += 1\n",
    "  result = round((cnt / N)*100, 3)\n",
    "  print(f\"{result:.3f}\"+'%') # 소수점 3째자리까지 출력"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f34e3d7",
   "metadata": {},
   "source": [
    "## 2941"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "40aebb72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "X = input()\n",
    "cros = ['c=', 'c-', 'dz=', 'd-', 'lj', 'nj', 's=', 'z=']\n",
    "cnt = 0\n",
    "start = 0\n",
    "N = len(X)\n",
    "\n",
    "while start < N:\n",
    "    if start+3 <= N and X[start:start+3] in cros:\n",
    "        cnt+=1\n",
    "        start += 3\n",
    "    elif start+2 <= N and X[start:start+2] in cros:\n",
    "        cnt += 1\n",
    "        start+=2\n",
    "    elif start+1 <= N and X[start:start+1] not in cros:\n",
    "        cnt+=1\n",
    "        start+=1\n",
    "print(cnt) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd535a9c",
   "metadata": {},
   "source": [
    "## 13305"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1010932f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "2 3 1\n",
      "5 2 4 1\n",
      "18\n"
     ]
    }
   ],
   "source": [
    "N = int(input())\n",
    "dist = list(map(int, input().split()))\n",
    "price = list(map(int, input().split()))\n",
    "min_price = price[0]\n",
    "result = 0\n",
    "\n",
    "for i in range(N-1):\n",
    "    if price[i] <= min_price:\n",
    "        min_price = min(price[i], min_price)\n",
    "    result += min_price*dist[i]\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28e1eb52",
   "metadata": {},
   "source": [
    "## 10988"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fb847332",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "level\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "x = input()\n",
    "N = len(x)\n",
    "mid = N//2\n",
    "result = 0\n",
    "cnt = 0\n",
    "\n",
    "for i in range(mid):\n",
    "    if x[i] == x[N-i-1]:\n",
    "        cnt += 1\n",
    "    else :\n",
    "        result = 0\n",
    "        break\n",
    "if cnt == mid:\n",
    "    result = 1\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c17d394",
   "metadata": {},
   "source": [
    "## 25206"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d42f223a",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = 0\n",
    "grades = {\n",
    "  'A+':4.5,\n",
    "  'A0':4.0,\n",
    "  'B+':3.5,\n",
    "  'B0':3.0,\n",
    "  'C+':2.5,\n",
    "  'C0':2.0,\n",
    "  'D+':1.5,\n",
    "  'D0':1.0,\n",
    "  'F':0.0\n",
    "}\n",
    "prod_sum = 0\n",
    "div = 0\n",
    "for _ in range(20):\n",
    "  x, credit, grade = input().split()\n",
    "  if grade == 'P':\n",
    "    pass\n",
    "  else:\n",
    "    prod_sum += float(credit)*grades[grade]\n",
    "    div += float(credit)\n",
    "result = prod_sum/div\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cca8599",
   "metadata": {},
   "source": [
    "## 1931"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6a4b2c30",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n",
      "1 4\n",
      "3 5\n",
      "0 6\n",
      "5 7\n",
      "3 8\n",
      "5 9\n",
      "6 10\n",
      "8 11\n",
      "8 12\n",
      "2 13\n",
      "12 14\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "N = int(input())\n",
    "ls = list()\n",
    "for _ in range(N):\n",
    "    time = tuple(map(int, input().split()))\n",
    "    ls.append(time)\n",
    "ls.sort(key = lambda x : x[0])\n",
    "ls.sort(key = lambda x : x[1])\n",
    "end_time = 0\n",
    "cnt = 0\n",
    "for d,s in ls:\n",
    "    if d >= end_time:\n",
    "        end_time = s\n",
    "        cnt += 1\n",
    "print(cnt)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84046c4a",
   "metadata": {},
   "source": [
    "## 24479"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "97832b67",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 5 1\n",
      "1 4\n",
      "1 2\n",
      "2 3\n",
      "2 4\n",
      "3 4\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "N, M, R = map(int, sys.stdin.readline().split())\n",
    "graph = [[] for _ in range(N + 1)]\n",
    "for i in range(M):\n",
    "    a, b = map(int, sys.stdin.readline().split())\n",
    "    graph[a].append(b)\n",
    "    graph[b].append(a)\n",
    "\n",
    "for i in range(N + 1):\n",
    "    graph[i].sort()\n",
    "    \n",
    "visited = [0] * (N + 1)\n",
    "cnt = 0\n",
    "\n",
    "def my_dfs(graph, v, visited):\n",
    "    global cnt\n",
    "    cnt += 1\n",
    "    visited[v] = cnt\n",
    "    \n",
    "    for i in graph[v]:\n",
    "        if visited[i] == 0:\n",
    "            my_dfs(graph, i, visited)\n",
    "    return visited\n",
    "\n",
    "result = my_dfs(graph, R, visited)\n",
    "result.pop(0)\n",
    "print(*result, sep='\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c54378f7",
   "metadata": {},
   "source": [
    "## 24444"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2eb4ec1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 5 1\n",
      "1 4\n",
      "1 2\n",
      "2 3\n",
      "2 4\n",
      "3 4\n"
     ]
    }
   ],
   "source": [
    "from collections import deque\n",
    "import sys\n",
    "\n",
    "N,M,R = map(int, sys.stdin.readline().split())\n",
    "graph = [[] for _ in range(N+1)]\n",
    "for i in range(M):\n",
    "    a,b = map(int, sys.stdin.readline().split())\n",
    "    graph[a].append(b)\n",
    "    graph[b].append(a)\n",
    "    \n",
    "for i in range(1,N+1):\n",
    "    graph[i].sort()\n",
    "    \n",
    "visited = [0]*(N+1)\n",
    "\n",
    "def my_bfs(graph, R, visited):\n",
    "    queue = deque([R])\n",
    "    visited[R] = 1\n",
    "    cnt = 1\n",
    "    while queue:\n",
    "        v = queue.popleft()\n",
    "        \n",
    "        for i in graph[v]:\n",
    "            if visited[i] == 0:\n",
    "                queue.append(i)\n",
    "                cnt += 1\n",
    "                visited[i] = cnt\n",
    "    return visited\n",
    "\n",
    "result = my_bfs(graph, R, visited)\n",
    "result.pop(0)\n",
    "print(*result, sep='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f693c9bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "4 1 5 2 3\n",
      "5\n",
      "1 3 7 9 5\n"
     ]
    }
   ],
   "source": [
    "N = int(input())\n",
    "array = list(map(int, input().split()))\n",
    "M = int(input())\n",
    "target = list(map(int, input().split()))\n",
    "array.sort()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a23cae77",
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_binary_search(array, target, start, end):\n",
    "    while start <= end:\n",
    "        result = 0\n",
    "        mid = (start+end)//2\n",
    "        if array[mid] == target:\n",
    "            result = 1\n",
    "            return result\n",
    "        elif array[mid] > target:\n",
    "            end = mid-1\n",
    "        else:\n",
    "            start = mid+1\n",
    "    result = 0\n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ca45f640",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "1\n",
      "0\n",
      "0\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "for i in target:\n",
    "    result= my_binary_search(array,i,0,N-1)\n",
    "    print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9429318e",
   "metadata": {},
   "source": [
    "## 1654"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "14b538af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 11\n",
      "802\n",
      "743\n",
      "457\n",
      "539\n"
     ]
    }
   ],
   "source": [
    "K, N = map(int,input().split())\n",
    "array = [int(input()) for _ in range(K)]\n",
    "\n",
    "result = 0\n",
    "# start=0 으로 시작하면 zero division error 뜸\n",
    "start = 1\n",
    "end = max(array)\n",
    "\n",
    "while start <= end:\n",
    "    total = 0\n",
    "    mid = (start+end)//2\n",
    "    for x in array:\n",
    "        total += x//mid\n",
    "    if total < N:\n",
    "        end = mid-1\n",
    "    else:\n",
    "        result = mid\n",
    "        start = mid+1\n",
    "        \n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47ce2b2c",
   "metadata": {},
   "source": [
    "## 1300"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "d8fa51e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "N = int(input())\n",
    "K = int(input())\n",
    "\n",
    "A = [[] for _ in range(N)]\n",
    "for i in range(N):\n",
    "    for j in range(N):\n",
    "        A[i].append((i+1)*(j+1))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "1f4fac04",
   "metadata": {},
   "outputs": [],
   "source": [
    "B = []\n",
    "for i in range(N):\n",
    "    for j in range(N):\n",
    "        B.append(A[i][j])\n",
    "B.sort()\n",
    "start = 0\n",
    "end = max(N*N+`)\n",
    "result = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "8edfde93",
   "metadata": {},
   "outputs": [],
   "source": [
    "start = 0\n",
    "end = N*N\n",
    "\n",
    "def binary_search(target,start,end):\n",
    "    while start<=end:\n",
    "        mid = (start+end)//2\n",
    "        if mid == target+1 and :\n",
    "            return mid\n",
    "        elif mid > target+1:\n",
    "            end = mid-1\n",
    "        else:\n",
    "            start = mid+1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "028a70b4",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "result = binary_search(K,start,end)\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "245b7923",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "sequence item 0: expected str instance, int found",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [16]\u001b[0m, in \u001b[0;36m<cell line: 2>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m b \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m----> 2\u001b[0m b\u001b[38;5;241m=\u001b[39m \u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mjoin\u001b[49m\u001b[43m(\u001b[49m\u001b[43ma\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[0;32m      3\u001b[0m b\n",
      "\u001b[1;31mTypeError\u001b[0m: sequence item 0: expected str instance, int found"
     ]
    }
   ],
   "source": [
    "b = []\n",
    "b= ''.join(a[0])\n",
    "b"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e4df162",
   "metadata": {},
   "source": [
    "## 7576"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "edf153c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6 4\n",
      "1 -1 0 0 0 0\n",
      "0 -1 0 0 0 0\n",
      "0 0 0 0 -1 0\n",
      "0 0 0 0 -1 1\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "from collections import deque\n",
    "\n",
    "N, M = map(int, input().split())\n",
    "graph = []\n",
    "for i in range(M):\n",
    "    x = list(map(int, input().split()))\n",
    "    graph.append(x)\n",
    "\n",
    "dx = [1,-1,0,0]\n",
    "dy = [0,0,1,-1]\n",
    "\n",
    "def my_dfs(graph):\n",
    "    queue = deque()\n",
    "    \n",
    "    for i in range(N):\n",
    "        for j in range(M):\n",
    "            if graph[j][i] == 1:\n",
    "                queue.append((j,i,0))\n",
    "\n",
    "    while queue:\n",
    "        \n",
    "        for _ in range(len(queue)):\n",
    "            x,y,d = queue.popleft()\n",
    "            for i in range(4):\n",
    "                nx = x+dx[i]\n",
    "                ny = y+dy[i]\n",
    "                if nx<=-1 or nx>=M or ny<=-1 or ny>=N :\n",
    "                    continue\n",
    "                if graph[nx][ny] == 1 or graph[nx][ny] == -1:\n",
    "                    continue\n",
    "                if graph[nx][ny] == 0 :\n",
    "                    graph[nx][ny] = 1\n",
    "                    queue.append((nx,ny,d+1))\n",
    "                    \n",
    "    # 하나라도 토마토가 변하지 않았다면 -1 출력\n",
    "    for i in range(M):\n",
    "        for j in range(N):\n",
    "            if graph[i][j] == 0:\n",
    "                d = -1\n",
    "                return d\n",
    "    # 모두 변하였다면 일수 출력\n",
    "    return d\n",
    "\n",
    "result = my_dfs(graph)\n",
    "print(result)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
