{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "930261e8",
   "metadata": {},
   "source": [
    "# 심화1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce980f69",
   "metadata": {},
   "source": [
    "## 3003"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5d80c201",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 1 2 1 2 1\n",
      "-1 0 0 1 0 7\n"
     ]
    }
   ],
   "source": [
    "now = list(map(int, input().split()))\n",
    "chess = [1,1,2,2,2,8]\n",
    "result = [chess[i]-now[i] for i in range(6)]\n",
    "\n",
    "print(*result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fd1d995",
   "metadata": {},
   "source": [
    "## 10812"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "38f2d12c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 5\n",
      "1 6 4\n",
      "3 9 8\n",
      "2 10 5\n",
      "1 3 3\n",
      "2 6 2\n",
      "1 4 6 2 3 7 10 5 8 9\n"
     ]
    }
   ],
   "source": [
    "N, M = map(int, input().split())\n",
    "\n",
    "basket = list(range(1, N + 1))\n",
    "for m in range(M):\n",
    "  i, j, k = map(int, input().split())\n",
    "  move = basket[k-1:j]\n",
    "  for t in basket[i-1:k-1]:\n",
    "    move.append(t)\n",
    "  basket[i-1:j] = move\n",
    "print(*basket)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c404c643",
   "metadata": {},
   "source": [
    "## 4344"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "cbdb2214",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "5 50 50 70 80 100\n",
      "40.000%\n",
      "7 100 95 90 80 70 60 50\n",
      "57.143%\n"
     ]
    }
   ],
   "source": [
    "C = int(input())\n",
    "for _ in range(C):\n",
    "  score = list(map(int, input().split()))\n",
    "  N = score.pop(0)\n",
    "  mu = sum(score) / len(score)\n",
    "  cnt = 0\n",
    "  for n in range(N):\n",
    "    if score[n] > mu:\n",
    "      cnt += 1\n",
    "  result = round((cnt / N)*100, 3)\n",
    "  print(f\"{result:.3f}\"+'%') # 소수점 3째자리까지 출력"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f34e3d7",
   "metadata": {},
   "source": [
    "## 2941"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "40aebb72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "X = input()\n",
    "cros = ['c=', 'c-', 'dz=', 'd-', 'lj', 'nj', 's=', 'z=']\n",
    "cnt = 0\n",
    "start = 0\n",
    "N = len(X)\n",
    "\n",
    "while start < N:\n",
    "    if start+3 <= N and X[start:start+3] in cros:\n",
    "        cnt+=1\n",
    "        start += 3\n",
    "    elif start+2 <= N and X[start:start+2] in cros:\n",
    "        cnt += 1\n",
    "        start+=2\n",
    "    elif start+1 <= N and X[start:start+1] not in cros:\n",
    "        cnt+=1\n",
    "        start+=1\n",
    "print(cnt) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd535a9c",
   "metadata": {},
   "source": [
    "## 13305"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1010932f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "2 3 1\n",
      "5 2 4 1\n",
      "18\n"
     ]
    }
   ],
   "source": [
    "N = int(input())\n",
    "dist = list(map(int, input().split()))\n",
    "price = list(map(int, input().split()))\n",
    "min_price = price[0]\n",
    "result = 0\n",
    "\n",
    "for i in range(N-1):\n",
    "    if price[i] <= min_price:\n",
    "        min_price = min(price[i], min_price)\n",
    "    result += min_price*dist[i]\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28e1eb52",
   "metadata": {},
   "source": [
    "## 10988"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fb847332",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "level\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "x = input()\n",
    "N = len(x)\n",
    "mid = N//2\n",
    "result = 0\n",
    "cnt = 0\n",
    "\n",
    "for i in range(mid):\n",
    "    if x[i] == x[N-i-1]:\n",
    "        cnt += 1\n",
    "    else :\n",
    "        result = 0\n",
    "        break\n",
    "if cnt == mid:\n",
    "    result = 1\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c17d394",
   "metadata": {},
   "source": [
    "## 25206"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d42f223a",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = 0\n",
    "grades = {\n",
    "  'A+':4.5,\n",
    "  'A0':4.0,\n",
    "  'B+':3.5,\n",
    "  'B0':3.0,\n",
    "  'C+':2.5,\n",
    "  'C0':2.0,\n",
    "  'D+':1.5,\n",
    "  'D0':1.0,\n",
    "  'F':0.0\n",
    "}\n",
    "prod_sum = 0\n",
    "div = 0\n",
    "for _ in range(20):\n",
    "  x, credit, grade = input().split()\n",
    "  if grade == 'P':\n",
    "    pass\n",
    "  else:\n",
    "    prod_sum += float(credit)*grades[grade]\n",
    "    div += float(credit)\n",
    "result = prod_sum/div\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cca8599",
   "metadata": {},
   "source": [
    "## 1931"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6a4b2c30",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n",
      "1 4\n",
      "3 5\n",
      "0 6\n",
      "5 7\n",
      "3 8\n",
      "5 9\n",
      "6 10\n",
      "8 11\n",
      "8 12\n",
      "2 13\n",
      "12 14\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "N = int(input())\n",
    "ls = list()\n",
    "for _ in range(N):\n",
    "    time = tuple(map(int, input().split()))\n",
    "    ls.append(time)\n",
    "ls.sort(key = lambda x : x[0])\n",
    "ls.sort(key = lambda x : x[1])\n",
    "end_time = 0\n",
    "cnt = 0\n",
    "for d,s in ls:\n",
    "    if d >= end_time:\n",
    "        end_time = s\n",
    "        cnt += 1\n",
    "print(cnt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e45bbc84",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
